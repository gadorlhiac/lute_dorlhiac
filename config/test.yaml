%YAML 1.3
---
title: "LUTE Task Configuration" # Include experiment description if desired
experiment: "EXPL10000"
date: "2023/10/25"
lute_version: 0.1      # Do not be change unless need to force older version
task_timeout: 600
work_dir: "/sdf/scratch/users/d/dorlhiac"
...
---
SubmitSMD:
  # Command line arguments
  producer: "/sdf/data/lcls/ds/mfx/mfxl1013621/results/smalldata_tools/producers/smd_producer.py"
  run: 99
  experiment: "mfxl1013621"
  #stn: 0
  directory: "/sdf/home/d/dorlhiac/scratch/lute_tests/test_smd"
  #gather_interval: 25
  #norecorder: False
  #url: "https://pswww.slac.stanford.edu"
  #epicsAll: False
  #full: False
  #fullSum: False
  default: true
  #image: False
  #tiff: False
  #centerpix: False
  #postRuntable: False
  #wait: False
  #xtcav: False
  #noarch: False
  # Producer variables. These are substituted into the producer to run specific
  # data reduction algorithms. Uncomment and modify as needed.
  # If you prefer to modify the producer file directly, leave commented.
  # Beginning with `getROIs`, you will need to modify the first entry to be a
  # detector. This detector MUST MATCH one of the detectors in `detnames`.
  # In the future this will be automated. If you have multiple detectors you can
  # add them with their own set of parameters.
  #detnames: []
  #epicsPV: []
  #ttCalib: []
  #getROIs:
  #  jungfrau1M:   # Change to detector name
  #    ROIs: [[[1, 2], [157, 487], [294, 598]]]
  #    writeArea: True   # Whether to save ROI, if False, save sum but not img.
  #    thresADU: None
  #getAzIntParams:
  #  Rayonix:
  #    eBeam: 18
  #    center: [87526.79161840, 92773.3296889500]
  #    dis_to_sam: 80.0
  #    tx: 0
  #    ty: 0
  #getAzIntPyFAIParams:
  #  Rayonix:
  #    pix_size: 176e-6
  #    ai_kwargs:
  #      dist: 1
  #      poni1: 960 * 1.76e-4
  #      poni2: 960 * 1.76e-4
  #    npts: 512
  #    int_units: "2th_deg"
  #    return2d: False
  #getPhotonsParams:
  #  jungfrau1M:
  #    ADU_per_photon: 9.5
  #    thresADU: 0.8
  #getDropletParams:
  #  epix_1:
  #    threshold: 5
  #    thresholdLow: 5
  #    thresADU: 60
  #    useRms: True
  #    nData: 1e5
  #getDroplet2Photons:
  #  epix_alc1:
  #    droplet:
  #      threshold: 10
  #      thresholdLow: 3
  #      thresADU: 10
  #      useRms: True
  #    d2p:
  #      aduspphot: 162
  #      mask: np.load('path_to_mask.npy')
  #      cputime: True
  #    nData: 3e4
  #getSvdParams:
  #  acq_0:
  #    basis_file: None
  #    n_pulse: 1
  #    delay: None
  #    return_reconstructed: True
  #getAutocorrParams:
  #  epix_2:
  #    mask: "/sdf/home/e/example/dataAna/mask_epix.npy"
  #    thresAdu: [72.0, 1.0e6]
  #    save_range: [70, 50]
  #    save_lineout: True



# FindOverlapXSS Configuration
FindOverlapXSS:
  # Detector selection - if left as "", will attempt to find a default
  exp_config:
    det_name: "Rayonix" # Detector to azimuthally integrate
    ipm_var: "ipm_dg2" # ipm to use for x-ray intensity filtering
    scan_var: "lxt"    # Scanned motor to use for overlap finding
  # Thresholds used for data filtering
  thresholds:
    min_Iscat: 10      # Minimum integrated scattering intensity
    min_ipm: 1000      # Minimum x-ray intensity at selected ipm

Test:
  float_var: 0.01
  str_var: "test"
  compound_var:
    int_var: 10
    dict_var: {"a": "b"}
  throw_error: False # Set True to test Task failure

TestBinary:
  executable: "/sdf/home/d/dorlhiac/test_tasks/test_threads"
  p_arg1: 4 # Number of cores

TestBinaryErr:
  executable: "/sdf/home/d/dorlhiac/test_tasks/test_threads_err"
  p_arg1: 4 # Number of cores

TestSocket:
  array_size: 8000 # Size of arrays to send. 8000 floats ~ 6.4e4
  num_arrays: 10 # Number of arrays to send.

TestMultiNodeCommunication:
  send_obj: "plot" # Either "plot" or "array". Type of object to send
  arr_size: 5      # Size of the array if sending array

FindPeaksPyAlgos:
    outdir: ""
    n_events: 100
    det_name: "Rayonix"
    event_receiver: "evr0"
    tag: "red"
    event_logic: false
    psana_mask: false
    mask_file: null
    min_peaks: 10
    max_peaks: 2048
    npix_min: 2
    npix_max: 30
    amax_thr: 40
    atot_thr: 180
    son_min: 3.0
    peak_rank: 3
    r0: 3.0
    dr: 2.0
    nsigm: 10.0
    compression:
        compressor: "sz3"
        abs_error: 10.0
        bin_size: 2
        roi_window_size: 9

IndexCrystFEL:
  #in_file: ""            # Location of a `.lst` file listing CXI files
  #out_file: ""           # Where to write the output stream file
  geometry: ""            # Location of a geometry file
  indexing: "mosflm"      # Indexing methods
  int_radius: "4,5,7"     # Integration radii
  tolerance: "5,5,5,1.5"  # Tolerances
  multi: True
  profile: True
  no_revalidate: True

IndexCCTBXXFEL:
  #phil_file: ...
  #in_file: ...
  # Comment out data_spec if providing one
  # Make sure in_file is appropriately set in that case.
  data_spec:
    experiment: "{{ experiment }}"
    run: "{{ run }}"
    detector_address: "Rayonix"
    wavelength_offset: -0.004414643434400234
    spectrum_eV_per_pixel: 0.07523816551020232
    spectrum_eV_offset: 9723.778479641995
    rayonix.bin_size: 4

  # Begin template parameters for .phil file
  # Comment out to avoid re-writing .phil
  phil_parameters:
    output_output_dir: "..."
    output_composite_output: true
    output_logging_dir: "..."
    dispatch_index: true
    dispatch_refine: true
    dispatch_integrate: true
    mp_mpi_method: "mpi" # "*multiprocessing sge lsf pbs mpi"
    spotfinder_threshold_dispersion_gain: 1.6
    spotfinder_threshold_dispersion_sigma_bkgnd: 2
    spotfinder_threshold_dispersion_sigma_strong: 2
    spotfinder_threshold_dispersion_global_thresh: 10
    spotfinder_threshold_dispersion_kernel_size: "6 6"
    spotfinder_filter_min_spot_size: 3
    spotfinder_filter_d_min: 3
    indexing_stills_refine_candidates_with_known_symmetry: true
    indexing_stills_refine_all_candidates: false
    indexing_known_symmetry_space_group: "..."
    indexing_known_symmetry_unit_cell: "..."
    integration_background_simple_outlier_plane_n_sigma: 10
    integration_summation_detector_gain: 1.0
    profile_gaussian_rs_centroid_definition: "com"
    refinement_reflections_outlier_algorithm: "..."

MergePartialator:
  #in_file: ""
  #out_file: ""
  #model: "unity"
  #niter: 1
  symmetry: "mmm"

MergeCCTBXXFEL:
  #phil_file: ...
  # Begin template parameters for .phil file
  # Comment out to avoid re-writing .phil
  phil_parameters:
    input_path: "path/to/input"
    input_experiments_suffix: "_integrated.expt"
    input_reflections_suffix: "_integrated.refl"
    input_parallel_file_load_method: "uniform"
    filter_algorithm: "unit_cell"
    filter_unit_cell_algorithm: "cluster"
    filter_unit_cell_cluster_covariance_file: "..."
    filter_unit_cell_cluster_covariance_component: 0
    filter_unit_cell_cluster_covariance_mahalanobis: 5.0
    filter_outlier_min_corr: -1.0
    select_algorithm: "significance_filter"
    select_significance_filter_sigma: 0.1
    scaling_model: ""
    scaling_resolution_scalar: 0.993420862158964
    postrefinement_enable: true
    postrefinement_algorithm: "rs"
    merging_d_min: 3
    merging_merge_anomalous: false
    merging_set_average_unit_cell: true
    merging_error_model: "ev11"
    statistics_n_bins: 20
    statistics_report_ML: true
    statistics_cciso_mtz_file: ""
    statistics_cciso_mtz_column_F: "F" # "fobs"
    output_prefix: ""
    output_output_dir: ""
    output_tmp_dir: ""
    output_do_timing: true
    output_log_level: true
    parallel_a2a: 1

CompareHKL:
  #in_files: ""
  #fom: "Rsplit"
  #nshells: 10
  #shell_file: ""
  #cell_file: ""
  symmetry: "mmm"

#ManipulateHKL:
  #output_format: "mtz"
  #out_file: "..."

DimpleSolve:
  pdb: "/path/to/pdb"
...
